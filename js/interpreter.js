//        SCHEME FUNJECTIONS HAND-WRITTEN IN JAVASCRIPT

var Symbol = (function () {
    var prototypeOfSymbol = {};
    
    prototypeOfSymbol.toString = function () {
        return "'|" + String(this._val) + "|";

    };

    prototypeOfSymbol.isSymbol = function () {
        return true;

    }

    var Symbol = function (str) {
        result = Object.create(prototypeOfSymbol);
        result._val = str;
        return result;

    };

    var symbols = {};

    return function (str) {
        return symbols[str] || (symbols[str] = Symbol(str));

    };

}());

var empty = [];

var cons = function (x, ys) {
    return [x].concat(ys);

};

var car = function (xs) {
    return xs[0];

};

var cdr = function (xs) {
    return xs.slice(1);

};

var list = function () {
    return Array.prototype.slice.call(arguments, 0);

};

var not = function (x) {
    return !x;

}

var string_to_number = Number

var number_to_string = String

var boolean_to_string = String

var symbol_to_string = function (sym) {
    return sym.toString();

};






























































//        MORE SCHEME FUNJECTIONS WRITTEN IN COFFEESCRIPT

// Generated by CoffeeScript 1.3.3
var also, append, apply, caaddddddddddr, caadddddddddr, caaddddddddr, caadddddddr, caaddddddr, caadddddr, caaddddr, caadddr, caaddr, caadr, caar, caddddddddddr, cadddddddddr, caddddddddr, cadddddddr, caddddddr, cadddddr, caddddr, cadddr, caddr, cadr, compose, count, display, error, given, given_seq, impossibility, is_boolean, is_empty, is_eq, is_equal, is_impossible, is_number, is_possible, is_string, is_symbol, least_acceptable_indent, matches, newline, possibility, raise, repeat, shallow_flatten, string_append, string_length, string_replace, substring,
  __slice = [].slice;

is_equal = function(a, b) {
  return a === b;
};

is_eq = is_equal;

apply = function(f, args) {
  return f.apply({}, args);
};

display = newline = console.log;

raise = function(x) {
  throw x;
};

error = function(x) {
  throw x;
};

is_symbol = function(x) {
  return x.isSymbol === true;
};

is_string = function(x) {
  return x.constructor === String;
};

is_boolean = function(x) {
  return x.constructor === Boolean;
};

is_number = function(x) {
  return x.constructor === Number;
};

matches = function(a, b) {
  return b.indexOf(a) !== -1;
};

string_length = function(str) {
  return str.length;
};

string_append = function() {
  return Array.prototype.reduce.call(arguments, function(a, b) {
    return a + b;
  });
};

string_replace = function(str, a, b) {
  return str.replace(a, b);
};

substring = function(str, start, end) {
  return str.slice(start, end);
};

count = function(f, xs) {
  return xs.filter(f).length;
};

is_empty = function(xs) {
  return xs.length === 0;
};

append = function() {
  return Array.prototype.reduce.call(arguments, function(rest, next) {
    return rest.concat(next);
  });
};

cadr = function(xs) {
  return xs[1];
};

caddr = function(xs) {
  return xs[2];
};

cadddr = function(xs) {
  return xs[3];
};

caddddr = function(xs) {
  return xs[4];
};

cadddddr = function(xs) {
  return xs[5];
};

caddddddr = function(xs) {
  return xs[6];
};

cadddddddr = function(xs) {
  return xs[7];
};

caddddddddr = function(xs) {
  return xs[8];
};

cadddddddddr = function(xs) {
  return xs[9];
};

caddddddddddr = function(xs) {
  return xs[10];
};

caar = function(xs) {
  return xs[0][0];
};

caadr = function(xs) {
  return xs[1][0];
};

caaddr = function(xs) {
  return xs[2][0];
};

caadddr = function(xs) {
  return xs[3][0];
};

caaddddr = function(xs) {
  return xs[4][0];
};

caadddddr = function(xs) {
  return xs[5][0];
};

caaddddddr = function(xs) {
  return xs[6][0];
};

caadddddddr = function(xs) {
  return xs[7][0];
};

caaddddddddr = function(xs) {
  return xs[8][0];
};

caadddddddddr = function(xs) {
  return xs[9][0];
};

caaddddddddddr = function(xs) {
  return xs[10][0];
};

possibility = function(result, str) {
  return [[result, str]];
};

impossibility = function() {
  return [];
};

is_possible = function(xs) {
  return 0 < xs.length;
};

is_impossible = function(xs) {
  return xs.length === 0;
};

shallow_flatten = function(xss) {
  return xss.reduce((function(ys, xs) {
    return ys.concat(xs);
  }), []);
};

given = function(possibilities, f) {
  return shallow_flatten(possibilities.map(function(_arg) {
    var result, str;
    result = _arg[0], str = _arg[1];
    return f(result, str);
  }));
};

also = append;

given_seq = (function() {
  var iter;
  iter = function(possibilities, procs) {
    if (procs.length === 0) {
      return possibilities;
    } else {
      return given(possibilities, function(_, str) {
        return iter(procs[0](str), procs.slice(1));
      });
    }
  };
  return function() {
    var possibilities, procs;
    possibilities = arguments[0], procs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return iter(possibilities, Array.prototype.slice.call(procs, 0));
  };
})();

repeat = function(n, c) {
  if (n === 0) {
    return '';
  } else {
    return c + repeat(n - 1, c);
  }
};

least_acceptable_indent = function(indent, max) {
  var candidates, _i, _results;
  candidates = (function() {
    _results = [];
    for (var _i = 0; 0 <= max ? _i <= max : _i >= max; 0 <= max ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).filter(indent);
  if (candidates.length === 0) {
    return false;
  } else {
    return repeat(candidates[0], ' ');
  }
};

compose = function() {
  var f, others, others_composed;
  f = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (others.length === 0) {
    return f;
  } else {
    others_composed = apply(compose, others);
    return function() {
      return f(apply(others_composed, arguments));
    };
  }
};
























































//        SCHEME TRANSLATED AUTOMAGICALLY:
var is_in_string = (function (str) {
    return ((function (matched) {
        return ((matches(matched, str)));
    }));
});;

var is_in_list = (function (xs) {
    return ((function (c) {
        return ((0 < (count((function (e) {
            return ((is_equal(e, c)));
        }), xs))));
    }));
});;

var is = (function (a) {
    return ((function (b) {
        return ((is_equal(a, b)));
    }));
});;

var is_gt = (function (a) {
    return ((function (b) {
        return ((a < b));
    }));
});;

var is_gte = (function (a) {
    return ((function (b) {
        return ((a <= b));
    }));
});;

var partial_flatten = (function (xs) {
    return (((false !== ((is_empty(xs)))) ? (xs) : ((append((car(xs)), (partial_flatten((cdr(xs)))))))));
});;

var substring_no_max = (function (str) {
    var indexes = Array.prototype.slice.call(arguments, 1);

    return (((false !== (((string_length(str)) < (car(indexes))))) ? ("") : (((false !== (((not((is_empty((cdr(indexes)))))) && ((string_length(str)) < (cadr(indexes)))))) ? ((substring_no_max(str, (car(indexes))))) : ((apply(substring, (cons(str, indexes)))))))));
});;

var assert = (function (check, message) {
    return (((false !== (check)) ? ((Symbol("ok"))) : ((raise(message)))));
});;

var parens_to_spaces = (function (str) {
    return ((string_replace((string_replace(str, ")", " ")), "(", " ")));
});;

var no_indent = (function (x) {
    return ((x === 0));
});;

var base_indent = (function (x) {
    return ((0 <= x));
});;

var any_indent = (function (_) {
    return (true);
});;

var tokenize = list;;

var parse_white = (function (str, _) {
    return ((parse_all_like((is(" ")), str, no_indent)));
});;

var parse_white_line = (function (str, indent) {
    return ((given((parse_all_like((is(" ")), str, no_indent)), (function (spaces, str) {
        return ((given((parse_characters("\n", str, no_indent)), (function (newline, str) {
            return ((possibility((string_append(spaces, newline)), str)));
        }))));
    }))));
});;

var parse_characters = (function (to_parse, str, _) {
    return (((false !== ((is_equal(to_parse, (substring_no_max(str, 0, (string_length(to_parse)))))))) ? ((possibility(to_parse, (substring(str, (string_length(to_parse))))))) : ((impossibility()))));
});;

var parse_n_like = (function (n, check, str, _) {
    return (((false !== ((n === 0))) ? ((possibility("", str))) : (((false !== (((is_equal(str, "")) || (not((check((substring(str, 0, 1))))))))) ? ((impossibility())) : ((given((parse_n_like((n - 1), check, (substring(str, 1)), no_indent)), (function (rest, unparsed_str) {
        return ((possibility((string_append((substring(str, 0, 1)), rest)), unparsed_str)));
    }))))))));
});;

var parse_all_like = (function (check, str, _) {
    return (((false !== (((is_equal(str, "")) || (not((check((substring(str, 0, 1))))))))) ? ((possibility("", str))) : ((given((parse_all_like(check, (substring_no_max(str, 1)), no_indent)), (function (rest, unparsed_str) {
        return ((possibility((string_append((substring(str, 0, 1)), rest)), unparsed_str)));
    }))))));
});;

var parse_all_at_least_one_like = (function (check, str, _) {
    return ((given((parse_all_like(check, str, no_indent)), (function (maybe_result, str) {
        return (((false !== ((0 < (string_length(maybe_result))))) ? ((possibility(maybe_result, str))) : ((impossibility()))));
    }))));
});;

var parse_separated = (function (separator, separated, str, indent) {
    var parse_separated = (function (result, str) {
        return (((false !== ((is_possible((separated(str, indent)))))) ? ((given((separated(str, indent)), (function (e, str) {
            return ((parse_separator((append(result, (list(e)))), str)));
        })))) : ((possibility(result, str)))));
    });;
    var parse_separator = (function (result, str) {
        return (((false !== ((is_possible((separator(str, indent)))))) ? ((given((separator(str, indent)), (function (_, str) {
            return ((parse_separated(result, str)));
        })))) : ((possibility(result, str)))));
    });;
    return ((parse_separated(([]), str)));
});;

var parse_each = (function (proc, str, indent) {
    var possibilities = (proc(str, indent));;
    return (((false !== ((not((is_possible(possibilities)))))) ? ((possibility(([]), str))) : ((given(possibilities, (function (exp, str) {
        return ((given((parse_each(proc, str, indent)), (function (exps, str) {
            return ((possibility((cons(exp, exps)), str)));
        }))));
    }))))));
});;

var parse_exps = (function (str, indent) {
    return ((given((parse_all_like((is_in_string(" \n")), str, no_indent)), (function (_, str) {
        return ((given((parse_separated((function (str, indent) {
            return ((given_seq((parse_white(str, no_indent)), (function (str) {
                return ((parse_characters("\n", str, no_indent)));
            }), (function (str) {
                return ((parse_all_like((function (str) {
                    return ((is_possible((parse_white_line(str, indent)))));
                }), str, no_indent)));
            }))));
        }), parse_exp, str, indent)), (function (exps, str) {
            return ((given((parse_all_like((is_in_string(" \n")), str, no_indent)), (function (_, str) {
                return (((false !== ((is_equal(str, "")))) ? ((possibility(exps, ""))) : ((impossibility()))));
            }))));
        }))));
    }))));
});;

var parse_exp = (function (str, indent) {
    return ((given((parse_n_like(1, (function (c) {
        return (true);
    }), str, no_indent)), (function (_, __) {
        return ((also((given_seq((parse_characters("(", str, no_indent)), (function (str) {
            return ((given((parse_exp(str, indent)), (function (exp, str) {
                return ((given_seq((parse_characters(")", str, no_indent)), (function (str) {
                    return ((possibility(exp, str)));
                }))));
            }))));
        }))), (parse_not_beginning_with_exp(str, indent)), (parse_beginning_with_exp(str, indent)))));
    }))));
});;

var parse_exp_not_naked_compound = (function (str, indent) {
    return ((also((given_seq((parse_characters("(", str, no_indent)), (function (str) {
        return ((given((parse_exp(str, indent)), (function (exp, str) {
            return ((given_seq((parse_characters(")", str, no_indent)), (function (str) {
                return ((possibility(exp, str)));
            }))));
        }))));
    }))), (parse_not_beginning_with_exp(str, indent)))));
});;

var parse_not_beginning_with_exp = (function (str, indent) {
    return ((also((parse_number(str, indent)), (parse_string(str, indent)), (parse_boolean(str, indent)), (parse_nil(str, indent)), (parse_dot(str, indent)), (parse_unknown(str, indent)), (parse_identifier(str, indent)), (parse_matching_identifier(str, indent)), (parse_list_literal(str, indent)), (parse_funject_literal(str, indent)), (parse_strict_assignment(str, indent)), (parse_lazy_assignment(str, indent)), (parse_reset_strict_assignment(str, indent)), (parse_reset_lazy_assignment(str, indent)))));
});;

var parse_beginning_with_exp = (function (str, indent) {
    return ((also((parse_funject_strict_assignment(str, indent)), (parse_funject_lazy_assignment(str, indent)), (parse_invocation(str, indent)), (parse_funject_inheritance(str, indent)), (parse_inverse_definition(str, indent)))));
});;

var parse_number = (function (str, indent) {
    var is_digit = (function (c) {
        return (((is_equal(c, "0")) || (is_equal(c, "1")) || (is_equal(c, "2")) || (is_equal(c, "3")) || (is_equal(c, "4")) || (is_equal(c, "5")) || (is_equal(c, "6")) || (is_equal(c, "7")) || (is_equal(c, "8")) || (is_equal(c, "9"))));
    });;
    var possibility_if_number = (function (nstr, str) {
        return (((false !== ((string_to_number(nstr)))) ? ((possibility((tokenize((Symbol("Number")), (string_to_number(nstr)))), str))) : (empty)));
    });;
    var with_e_notation = (function (nstr, str) {
        var digits_after_e = (function (nstr, str) {
            return ((given((parse_all_at_least_one_like(is_digit, str, no_indent)), (function (digits, str) {
                return ((possibility_if_number((string_append(nstr, digits)), str)));
            }))));
        });;
        return ((given((parse_n_like(1, (function (c) {
            return (((is_equal(c, "e")) || (is_equal(c, "E"))));
        }), str, no_indent)), (function (e, str) {
            return ((also((digits_after_e((string_append(nstr, e)), str)), (given((parse_n_like(1, (function (c) {
                return (((is_equal(c, "+")) || (is_equal(c, "-"))));
            }), str, no_indent)), (function (e_sign, str) {
                return ((digits_after_e((string_append(nstr, e, e_sign)), str)));
            }))))));
        }))));
    });;
    var after_initial_sign = (function (sign, str) {
        return ((given((parse_all_at_least_one_like(is_digit, str, no_indent)), (function (first_digits, str) {
            return ((also((possibility_if_number((string_append(sign, first_digits)), str)), (with_e_notation((string_append(sign, first_digits)), str)), (given((parse_characters(".", str, no_indent)), (function (spot, str) {
                return ((given((parse_all_at_least_one_like(is_digit, str, no_indent)), (function (rest_digits, str) {
                    return ((also((possibility_if_number((string_append(sign, first_digits, spot, rest_digits)), str)), (with_e_notation((string_append(sign, first_digits, spot, rest_digits)), str)))));
                }))));
            }))))));
        }))));
    });;
    return ((also((after_initial_sign("", str)), (given((parse_characters("-", str, no_indent)), after_initial_sign)))));
});;

var parse_string = (function (str, indent) {
    var unescape = (function (str) {
        return ((string_replace("\\n", "\n", (string_replace("\\\"", "\"", (string_replace("\\'", "'", str)))))));
    });;
    var parse_string_contents = (function (delim, str) {
        var iter = (function (str) {
            return ((also((given((parse_characters(delim, str, no_indent)), (function (_, __) {
                return ((possibility("", str)));
            }))), (given((parse_all_at_least_one_like((function (c) {
                return ((not(((is_equal(c, delim)) || (is_equal(c, "\\")) || (is_equal(c, "\n"))))));
            }), str, no_indent)), (function (first, str) {
                return ((given((iter(str)), (function (second, str) {
                    return ((possibility((string_append(first, second)), str)));
                }))));
            }))), (given((parse_characters("\\", str, no_indent)), (function (_, str) {
                return ((given((parse_n_like(1, (function (c) {
                    return (((is_equal(c, "n")) || (is_equal(c, "\\")) || (is_equal(c, "\"")) || (is_equal(c, "'"))));
                }), str, no_indent)), (function (c, str) {
                    return ((given((iter(str)), (function (contents, str) {
                        return ((possibility((string_append("\\", c, contents)), str)));
                    }))));
                }))));
            }))), (given((parse_characters("\n", str, no_indent)), (function (_, str) {
                return ((given((parse_all_like((is_in_string(" ")), str, no_indent)), (function (spaces, str) {
                    var indentation = (least_acceptable_indent(indent, (string_length(spaces))));;
                    return (((false !== (indentation)) ? ((iter((substring(str, (string_length(indentation))))))) : ((impossibility()))));
                }))));
            }))))));
        });;
        return ((iter(str)));
    });;
    var with_delimiter = (function (delim) {
        return ((given((parse_characters(delim, str, no_indent)), (function (_, str) {
            return ((given((parse_string_contents(delim, str)), (function (contents, str) {
                return ((given((parse_characters(delim, str, no_indent)), (function (_, str) {
                    return ((possibility((tokenize((Symbol("String")), contents)), str)));
                }))));
            }))));
        }))));
    });;
    return ((also((with_delimiter("\"")), (with_delimiter("'")))));
});;

var parse_boolean = (function (str, indent) {
    return ((given((also((parse_characters("true", str, no_indent)), (parse_characters("false", str, no_indent)))), (function (bool, str) {
        return (((false !== ((is_equal(bool, "true")))) ? ((possibility((tokenize((Symbol("Boolean")), true)), str))) : (((false !== ((is_equal(bool, "false")))) ? ((possibility((tokenize((Symbol("Boolean")), false)), str))) : ((raise("parse-boolean: Syntax Error")))))));
    }))));
});;

var parse_nil = (function (str, indent) {
    return ((given((parse_characters("nil", str, no_indent)), (function (_, str) {
        return ((possibility((tokenize((Symbol("Nil")))), str)));
    }))));
});;

var parse_dot = (function (str, indent) {
    return ((given((parse_characters("dot", str, no_indent)), (function (_, str) {
        return ((possibility((tokenize((Symbol("Dot")))), str)));
    }))));
});;

var parse_unknown = (function (str, indent) {
    return ((given((parse_characters("unknown", str, no_indent)), (function (_, str) {
        return ((possibility((tokenize((Symbol("Unknown")))), str)));
    }))));
});;

var numbers = "1234567890";;

var legal_variable_characters = "-+=0QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";;

var numbers_and_legal_variable_characters = (string_append(numbers, legal_variable_characters));;

var parse_identifier = (function (str, indent) {
    debugger;
    return ((given((also((given((parse_n_like(1, (is_in_string(legal_variable_characters)), str, no_indent)), (function (name, str) {
        debugger;
        return (((false !== ((is_impossible((parse_n_like(1, (is_in_string(numbers_and_legal_variable_characters)), str, no_indent)))))) ? ((possibility(name, str))) : ((impossibility()))));
    }))), (given((parse_n_like(1, (is_in_string(numbers_and_legal_variable_characters)), str, no_indent)), (function (first, str) {
        return ((given((parse_all_at_least_one_like((is_in_string(numbers_and_legal_variable_characters)), str, no_indent)), (function (rest, str) {
            return ((possibility((string_append(first, rest)), str)));
        }))));
    }))))), (function (name, str) {
        return ((possibility((tokenize((Symbol("Identifier")), name)), str)));
    }))));
});;

var parse_matching_identifier = (function (str, indent) {
    return ((given_seq((parse_characters("@", str, no_indent)), (function (str) {
        return ((given((parse_identifier(str, no_indent)), (function (name, str) {
            return ((possibility((tokenize((Symbol("Matching-identifier")), (string_append("@", (cadr(name)))))), str)));
        }))));
    }))));
});;

var parse_funject_literal = (function (str, indent) {
    return ((given((parse_characters("{", str, no_indent)), (function (_, str) {
        return ((also((given((parse_white(str, no_indent)), (function (_, str) {
            return ((given((parse_characters("}", str, no_indent)), (function (_, str) {
                return ((possibility((tokenize((Symbol("Funject-literal")), ([]))), str)));
            }))));
        }))), (given((parse_white(str, no_indent)), (function (_, str) {
            return ((given((parse_exp(str, indent)), (function (key, str) {
                return ((given_seq((parse_white(str, no_indent)), (function (str) {
                    return ((parse_characters(":", str, no_indent)));
                }), (function (str) {
                    return ((parse_white(str, no_indent)));
                }), (function (str) {
                    return ((given((parse_lazy_expressions(str, indent)), (function (value, str) {
                        return ((given((parse_all_like((function (c) {
                            return (((is_equal(c, " ")) || (is_equal(c, "\n"))));
                        }), str, no_indent)), (function (_, str) {
                            return ((given((parse_characters("}", str, no_indent)), (function (_, str) {
                                return ((possibility((tokenize((Symbol("Funject-literal")), (list((list(key, value)))))), str)));
                            }))));
                        }))));
                    }))));
                }))));
            }))));
        }))), (given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("\n", str, no_indent)));
        }), (function (str) {
            return ((parse_each(parse_white_line, str, no_indent)));
        }), (function (str) {
            return ((also((given_seq((parse_white(str, indent)), (function (str) {
                return ((parse_characters("}", str, no_indent)));
            }), (function (str) {
                return ((possibility((tokenize((Symbol("Funject")), empty)), str)));
            }))), (given((parse_white(str, no_indent)), (function (spaces, _) {
                var indentation = (string_length(spaces));;
                ((false !== ((indent(indentation)))) ? (([])) : ((raise("parse-funject-literal: Synatx Error: you must indent the arguments of a multiline funject literal more than the normal indentation level!"))));
                return ((given((parse_each((function (str, indent) {
                    return ((given_seq((parse_each(parse_white_line, str, indent)), (function (str) {
                        return ((parse_characters(spaces, str, no_indent)));
                    }), (function (str) {
                        return ((given((parse_exp(str, indent)), (function (key, str) {
                            return ((given_seq((parse_white(str, no_indent)), (function (str) {
                                return ((parse_characters(":", str, no_indent)));
                            }), (function (str) {
                                return ((parse_white(str, no_indent)));
                            }), (function (str) {
                                return ((given((parse_lazy_expressions(str, (function (ind) {
                                    return ((indentation < ind));
                                }))), (function (value, str) {
                                    return ((given_seq((parse_white(str, no_indent)), (function (str) {
                                        return ((parse_characters("\n", str, no_indent)));
                                    }), (function (str) {
                                        return ((possibility((list(key, value)), str)));
                                    }))));
                                }))));
                            }))));
                        }))));
                    }))));
                }), str, indent)), (function (pairs, str) {
                    return ((given_seq((parse_each(parse_white_line, str, indent)), (function (str) {
                        return ((given((parse_all_like((is(" ")), str, no_indent)), (function (spaces, str) {
                            return (((false !== ((not((indent((string_length(spaces)))))))) ? ((impossibility())) : ((given_seq((parse_characters("}", str, no_indent)), (function (str) {
                                return ((possibility((tokenize((Symbol("Funject-literal")), pairs)), str)));
                            }))))));
                        }))));
                    }))));
                }))));
            }))))));
        }))))));
    }))));
});;

var parse_list_literal = (function (str, indent) {
    return ((given((parse_characters("[", str, no_indent)), (function (_, str) {
        return ((given((parse_separated((function (str, _) {
            return ((given_seq((parse_white(str, no_indent)), (function (str) {
                return ((parse_characters(",", str, no_indent)));
            }), (function (str) {
                return ((parse_white(str, no_indent)));
            }))));
        }), parse_exp, str, indent)), (function (elems, str) {
            return ((given((parse_characters("]", str, no_indent)), (function (_, str) {
                return ((possibility((tokenize((Symbol("List-literal")), elems)), str)));
            }))));
        }))));
    }))));
});;

var parse_lazy_expressions = (function (str, indent) {
    return ((also((parse_exp(str, indent)), (given_seq((parse_white(str, no_indent)), (function (measure_str) {
        return ((parse_characters("\n", str, no_indent)));
    }), (function (measure_str) {
        return ((given((parse_all_like((is(" ")), measure_str, no_indent)), (function (spaces, measure_str) {
            var indentation = (string_length(spaces));;
            ((false !== ((indent(indentation)))) ? (([])) : ((raise("parse-lazy-expressions: you must indent a series of statements farther than its enclosing syntactic block!"))));
            var parse_white_newline_indent = (function (str, indent) {
                return ((given_seq((parse_white(str, no_indent)), (function (str) {
                    return ((parse_characters("\n", str, no_indent)));
                }), (function (str) {
                    return ((parse_each(parse_white_line, str, base_indent)));
                }), (function (str) {
                    return ((parse_characters(spaces, str, no_indent)));
                }))));
            });;
            return ((given_seq((parse_white_newline_indent(str, indent)), (function (str) {
                return ((given((parse_separated(parse_white_newline_indent, parse_exp, str, (is_gte(indentation)))), (function (exps, str) {
                    return ((possibility((tokenize((Symbol("Lazy-expressions")), exps)), str)));
                }))));
            }))));
        }))));
    }))))));
});;

var parse_strict_assignment = (function (str, indent) {
    return ((given((parse_identifier(str, no_indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_exp(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Strict-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_lazy_assignment = (function (str, indent) {
    return ((given((parse_identifier(str, no_indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters(":=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_lazy_expressions(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Lazy-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_funject_strict_assignment = (function (str, indent) {
    return ((given((parse_invocation(str, indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_exp(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Funject-strict-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_funject_lazy_assignment = (function (str, indent) {
    return ((given((parse_invocation(str, indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters(":=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_lazy_expressions(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Funject-lazy-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_reset_strict_assignment = (function (str, indent) {
    return ((given((parse_identifier(str, no_indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("|=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_exp(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Reset-strict-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_reset_lazy_assignment = (function (str, indent) {
    return ((given((parse_identifier(str, no_indent)), (function (left, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("|:=", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_lazy_expressions(str, indent)), (function (right, str) {
                return ((possibility((tokenize((Symbol("Reset-lazy-assignment")), left, right)), str)));
            }))));
        }))));
    }))));
});;

var parse_invocation = (function (str, indent) {
    return ((given((parse_exp_not_naked_compound(str, indent)), (function (receiver, str) {
        return ((also((given((parse_exp(str, indent)), (function (args, str) {
            return ((possibility((tokenize((Symbol("Application")), receiver, args)), str)));
        }))), (given((parse_characters(".", str, no_indent)), (function (_, str) {
            return ((given((parse_identifier(str, no_indent)), (function (property, str) {
                return ((possibility((tokenize((Symbol("Application")), receiver, (tokenize((Symbol("List-literal")), (list((tokenize((Symbol("Dot")))), (tokenize((Symbol("String")), property)))))))), str)));
            }))));
        }))))));
    }))));
});;

var parse_funject_inheritance = (function (str, indent) {
    return ((given((parse_exp_not_naked_compound(str, indent)), (function (heir, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("<<", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            return ((given((parse_exp(str, indent)), (function (inherited, str) {
                return ((possibility((tokenize((Symbol("Funject-inheritance")), heir, inherited)), str)));
            }))));
        }))));
    }))));
});;

var parse_inverse_definition = (function (str, indent) {
    return ((given((parse_exp_not_naked_compound(str, indent)), (function (f, str) {
        return ((given_seq((parse_white(str, no_indent)), (function (str) {
            return ((parse_characters("<-", str, no_indent)));
        }), (function (str) {
            return ((parse_white(str, no_indent)));
        }), (function (str) {
            (parse_exp(str, indent));
            return ((function (f_inverse, str) {
                return ((possibility((tokenize((Symbol("Inverse-definition")), f, f_inverse)), str)));
            }));
        }))));
    }))));
});

function isArray (x) {
    return x && x.constructor === Array

}

function print_tokens (x) {
    if (!isArray(x)) {
        return String(x);

    } else {
        return '[' + x.map(print_tokens).join(', ') + ']';

    }

}

function log_funject (str) {
  console.log(print_tokens(parse_exps(str, base_indent)));

}

log_funject("hyphen-separated-variable = {[key]: 'funject'}");


/*
Some example funject:

3.0e8

true

"f"

nil 

foo

fo-o

[]

[1, 2, [9]]

{}

{ x: 3 }

{ 
  x: 3
  y: 5 
}

x :=   
    y = 3
    y |=   { foo: 'bar' }   
    y

foo-bar-baz |:=
    y = 3
    
    y |= {
        foo: 'bar'
        baz: 'qux'
    }
    y

ajax{
    'url': 'http://www.google.com'
    'expected-encoding': 'utf-8'
    'success': { [data]: print['hooray! data'] }
    'failure': { [data]: print['oh no! it failed.'] }
}

*/