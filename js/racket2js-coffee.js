// Generated by CoffeeScript 1.3.3
var also, append, apply, assert, boolean_to_string, caaddddddddddr, caadddddddddr, caaddddddddr, caadddddddr, caaddddddr, caadddddr, caaddddr, caadddr, caaddr, caadr, caar, caddddddddddr, cadddddddddr, caddddddddr, cadddddddr, caddddddr, cadddddr, caddddr, cadddr, caddr, cadr, car, cddddddddddddr, cdddddddddddr, cddddddddddr, cdddddddddr, cddddddddr, cdddddddr, cddddddr, cdddddr, cddddr, cdddr, cddr, cdr, compose, cons, count, deep_list_to_mlist, deep_mlist_to_list, display, empty, error, given, given_seq, impossibility, is_boolean, is_empty, is_eq, is_equal, is_impossible, is_list, is_mlist, is_number, is_possible, is_string, is_symbol, least_acceptable_indent, length, list, list_to_mlist, map, mappend, matches, mcaaddddddddddr, mcaadddddddddr, mcaaddddddddr, mcaadddddddr, mcaaddddddr, mcaadddddr, mcaaddddr, mcaadddr, mcaaddr, mcaadr, mcaar, mcaddddddddddr, mcadddddddddr, mcaddddddddr, mcadddddddr, mcaddddddr, mcadddddr, mcaddddr, mcadddr, mcaddr, mcadr, mcar, mcddddddddddddr, mcdddddddddddr, mcddddddddddr, mcdddddddddr, mcddddddddr, mcdddddddr, mcddddddr, mcdddddr, mcddddr, mcdddr, mcddr, mcdr, mlength, mlist, mlist_to_list, mmap, newline, number_to_string, possibility, raise, repeat, set_caaddddddddddr_racket_exclamation_point, set_caadddddddddr_racket_exclamation_point, set_caaddddddddr_racket_exclamation_point, set_caadddddddr_racket_exclamation_point, set_caaddddddr_racket_exclamation_point, set_caadddddr_racket_exclamation_point, set_caaddddr_racket_exclamation_point, set_caadddr_racket_exclamation_point, set_caaddr_racket_exclamation_point, set_caadr_racket_exclamation_point, set_caar_racket_exclamation_point, set_caddddddddddr_racket_exclamation_point, set_cadddddddddr_racket_exclamation_point, set_caddddddddr_racket_exclamation_point, set_cadddddddr_racket_exclamation_point, set_caddddddr_racket_exclamation_point, set_cadddddr_racket_exclamation_point, set_caddddr_racket_exclamation_point, set_cadddr_racket_exclamation_point, set_caddr_racket_exclamation_point, set_cadr_racket_exclamation_point, set_car_racket_exclamation_point, set_mcaaddddddddddr_racket_exclamation_point, set_mcaadddddddddr_racket_exclamation_point, set_mcaaddddddddr_racket_exclamation_point, set_mcaadddddddr_racket_exclamation_point, set_mcaaddddddr_racket_exclamation_point, set_mcaadddddr_racket_exclamation_point, set_mcaaddddr_racket_exclamation_point, set_mcaadddr_racket_exclamation_point, set_mcaaddr_racket_exclamation_point, set_mcaadr_racket_exclamation_point, set_mcaar_racket_exclamation_point, set_mcaddddddddddr_racket_exclamation_point, set_mcadddddddddr_racket_exclamation_point, set_mcaddddddddr_racket_exclamation_point, set_mcadddddddr_racket_exclamation_point, set_mcaddddddr_racket_exclamation_point, set_mcadddddr_racket_exclamation_point, set_mcaddddr_racket_exclamation_point, set_mcadddr_racket_exclamation_point, set_mcaddr_racket_exclamation_point, set_mcadr_racket_exclamation_point, set_mcar_racket_exclamation_point, set_of_racket_exclamation_point, shallow_flatten, stream_first, string_append, string_downcase, string_length, string_replace, string_to_number, string_upcase, substring, _, _racket_division_symbol, _racket_mult_symbol, _racket_plus_symbol,
  __slice = [].slice;

set_of_racket_exclamation_point = function(obj, k, v) {
  return obj[k] = v;
};

string_to_number = Number;

number_to_string = String;

boolean_to_string = String;

is_equal = function(a, b) {
  return a === b;
};

is_eq = is_equal;

apply = function(f, args) {
  return f.apply({}, args);
};

display = newline = console.log;

raise = function(x) {
  throw x;
};

error = function() {
  var args, x;
  x = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  throw {
    name: x,
    message: args
  };
};

assert = function(cond, message) {
  if (!cond) {
    throw message;
  }
};

is_symbol = function(x) {
  return x.isSymbol === true;
};

is_string = function(x) {
  return x.constructor === String;
};

is_boolean = function(x) {
  return x.constructor === Boolean;
};

is_number = function(x) {
  return x.constructor === Number;
};

_racket_plus_symbol = function(a, b) {
  return a + b;
};

_ = function(a, b) {
  return a - b;
};

_racket_mult_symbol = function(a, b) {
  return a * b;
};

_racket_division_symbol = function(a, b) {
  return a / b;
};

matches = function(a, b) {
  return b.indexOf(a) !== -1;
};

string_length = function(str) {
  return str.length;
};

string_append = function() {
  return Array.prototype.reduce.call(arguments, function(a, b) {
    return a + b;
  });
};

string_replace = function(str, a, b) {
  return str.replace(a, b);
};

substring = function(str, start, end) {
  return str.slice(start, end);
};

string_downcase = function(str) {
  return str.toLowerCase();
};

string_upcase = function(str) {
  return str.toUpperCase();
};

/*Less efficient list functions, that do not assume cdr always returns a list.
empty = []
cons = mcons = (a, b) -> [a, b]
car = mcar = (xs) -> xs[0]
cdr = mcdr = (xs) -> xs[1]
cadr = mcdar = (xs) -> xs[1][0]
append = mappend = (xs, ys) -> 
    if xs.length is 0
        return ys
    else
        return cons(xs[0], append(xs[1..], ys))
list = mlist = () -> 
    if arguments.length is 0
        return []
    else 
        return [arguments[0], mlist.apply({}, Array::slice.call(arguments, 1))]
length = mlength = (xs) ->
    if xs.length is 0
        0
    else
        1 + length(xs[1])
is_empty = (xs) -> xs.length is 0
mlist_to_list = list_to_mlist = (xs) -> xs
set_car_racket_exclamation_point = (xs, x) -> xs[0] = x
set_cdr_racket_exclamation_point = (xs, x) -> xs[1] = x
array2nested_pairs = (arr) -> 
    if arr.length is 0
        return []
    else
        return [arr[0], array2nested_pairs(arr[1..])]
nested_pairs2array = (xs) ->
    if xs.length is 0
        return []
    else
        return [xs[0]].concat(nested_pairs2array(xs[1]))
deep_list_to_mlist = deep_mlist_to_list = (x) -> x
*/


cons = function(x, xs) {
  return [x].concat(xs);
};

empty = [];

list_to_mlist = mlist_to_list = deep_list_to_mlist = deep_mlist_to_list = function(x) {
  return x;
};

is_list = is_mlist = function(xs) {
  return xs.constructor === Array;
};

list = mlist = function() {
  return Array.prototype.slice.call(arguments, 0);
};

count = function(f, xs) {
  return xs.filter(f).length;
};

length = mlength = function(xs) {
  return xs.length;
};

is_empty = function(xs) {
  return xs.length === 0;
};

append = mappend = function() {
  return Array.prototype.reduce.call(arguments, function(rest, next) {
    return rest.concat(next);
  });
};

map = mmap = function(f, xs) {
  return xs.map(f);
};

car = mcar = stream_first = function(xs) {
  return xs[0];
};

cadr = mcadr = function(xs) {
  return xs[1];
};

caddr = mcaddr = function(xs) {
  return xs[2];
};

cadddr = mcadddr = function(xs) {
  return xs[3];
};

caddddr = mcaddddr = function(xs) {
  return xs[4];
};

cadddddr = mcadddddr = function(xs) {
  return xs[5];
};

caddddddr = mcaddddddr = function(xs) {
  return xs[6];
};

cadddddddr = mcadddddddr = function(xs) {
  return xs[7];
};

caddddddddr = mcaddddddddr = function(xs) {
  return xs[8];
};

cadddddddddr = mcadddddddddr = function(xs) {
  return xs[9];
};

caddddddddddr = mcaddddddddddr = function(xs) {
  return xs[10];
};

cdr = mcdr = function(xs) {
  return xs.slice(1);
};

cddr = mcddr = function(xs) {
  return xs.slice(2);
};

cdddr = mcdddr = function(xs) {
  return xs.slice(3);
};

cddddr = mcddddr = function(xs) {
  return xs.slice(4);
};

cdddddr = mcdddddr = function(xs) {
  return xs.slice(5);
};

cddddddr = mcddddddr = function(xs) {
  return xs.slice(6);
};

cdddddddr = mcdddddddr = function(xs) {
  return xs.slice(7);
};

cddddddddr = mcddddddddr = function(xs) {
  return xs.slice(8);
};

cdddddddddr = mcdddddddddr = function(xs) {
  return xs.slice(9);
};

cddddddddddr = mcddddddddddr = function(xs) {
  return xs.slice(10);
};

cdddddddddddr = mcdddddddddddr = function(xs) {
  return xs.slice(11);
};

cddddddddddddr = mcddddddddddddr = function(xs) {
  return xs.slice(12);
};

caar = mcaar = function(xs) {
  return xs[0][0];
};

caadr = mcaadr = function(xs) {
  return xs[1][0];
};

caaddr = mcaaddr = function(xs) {
  return xs[2][0];
};

caadddr = mcaadddr = function(xs) {
  return xs[3][0];
};

caaddddr = mcaaddddr = function(xs) {
  return xs[4][0];
};

caadddddr = mcaadddddr = function(xs) {
  return xs[5][0];
};

caaddddddr = mcaaddddddr = function(xs) {
  return xs[6][0];
};

caadddddddr = mcaadddddddr = function(xs) {
  return xs[7][0];
};

caaddddddddr = mcaaddddddddr = function(xs) {
  return xs[8][0];
};

caadddddddddr = mcaadddddddddr = function(xs) {
  return xs[9][0];
};

caaddddddddddr = mcaaddddddddddr = function(xs) {
  return xs[10][0];
};

set_car_racket_exclamation_point = set_mcar_racket_exclamation_point = function(xs, x) {
  return xs[0] = x;
};

set_cadr_racket_exclamation_point = set_mcadr_racket_exclamation_point = function(xs, x) {
  return xs[1] = x;
};

set_caddr_racket_exclamation_point = set_mcaddr_racket_exclamation_point = function(xs, x) {
  return xs[2] = x;
};

set_cadddr_racket_exclamation_point = set_mcadddr_racket_exclamation_point = function(xs, x) {
  return xs[3] = x;
};

set_caddddr_racket_exclamation_point = set_mcaddddr_racket_exclamation_point = function(xs, x) {
  return xs[4] = x;
};

set_cadddddr_racket_exclamation_point = set_mcadddddr_racket_exclamation_point = function(xs, x) {
  return xs[5] = x;
};

set_caddddddr_racket_exclamation_point = set_mcaddddddr_racket_exclamation_point = function(xs, x) {
  return xs[6] = x;
};

set_cadddddddr_racket_exclamation_point = set_mcadddddddr_racket_exclamation_point = function(xs, x) {
  return xs[7] = x;
};

set_caddddddddr_racket_exclamation_point = set_mcaddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[8] = x;
};

set_cadddddddddr_racket_exclamation_point = set_mcadddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[9] = x;
};

set_caddddddddddr_racket_exclamation_point = set_mcaddddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[10] = x;
};

set_caar_racket_exclamation_point = set_mcaar_racket_exclamation_point = function(xs, x) {
  return xs[0][0] = x;
};

set_caadr_racket_exclamation_point = set_mcaadr_racket_exclamation_point = function(xs, x) {
  return xs[1][0] = x;
};

set_caaddr_racket_exclamation_point = set_mcaaddr_racket_exclamation_point = function(xs, x) {
  return xs[2][0] = x;
};

set_caadddr_racket_exclamation_point = set_mcaadddr_racket_exclamation_point = function(xs, x) {
  return xs[3][0] = x;
};

set_caaddddr_racket_exclamation_point = set_mcaaddddr_racket_exclamation_point = function(xs, x) {
  return xs[4][0] = x;
};

set_caadddddr_racket_exclamation_point = set_mcaadddddr_racket_exclamation_point = function(xs, x) {
  return xs[5][0] = x;
};

set_caaddddddr_racket_exclamation_point = set_mcaaddddddr_racket_exclamation_point = function(xs, x) {
  return xs[6][0] = x;
};

set_caadddddddr_racket_exclamation_point = set_mcaadddddddr_racket_exclamation_point = function(xs, x) {
  return xs[7][0] = x;
};

set_caaddddddddr_racket_exclamation_point = set_mcaaddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[8][0] = x;
};

set_caadddddddddr_racket_exclamation_point = set_mcaadddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[9][0] = x;
};

set_caaddddddddddr_racket_exclamation_point = set_mcaaddddddddddr_racket_exclamation_point = function(xs, x) {
  return xs[10][0] = x;
};

possibility = function(result, str) {
  return list(list(result, str));
};

impossibility = function() {
  return [];
};

is_possible = function(xs) {
  return 0 < xs.length;
};

is_impossible = function(xs) {
  return xs.length === 0;
};

shallow_flatten = function(xss) {
  return xss.reduce((function(ys, xs) {
    return ys.concat(xs);
  }), []);
};

given = function(possibilities, f) {
  return shallow_flatten(possibilities.map(function(_arg) {
    var result, str;
    result = _arg[0], str = _arg[1];
    return f(result, str);
  }));
};

also = append;

given_seq = (function() {
  var iter;
  iter = function(possibilities, procs) {
    if (procs.length === 0) {
      return possibilities;
    } else {
      return given(possibilities, function(_, str) {
        return iter(procs[0](str), procs.slice(1));
      });
    }
  };
  return function() {
    var possibilities, procs;
    possibilities = arguments[0], procs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return iter(possibilities, Array.prototype.slice.call(procs, 0));
  };
})();

repeat = function(n, c) {
  if (n === 0) {
    return '';
  } else {
    return c + repeat(n - 1, c);
  }
};

least_acceptable_indent = function(indent, max) {
  var candidates, _i, _results;
  candidates = (function() {
    _results = [];
    for (var _i = 0; 0 <= max ? _i <= max : _i >= max; 0 <= max ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).filter(indent);
  if (candidates.length === 0) {
    return false;
  } else {
    return repeat(candidates[0], ' ');
  }
};

compose = function() {
  var f, others, others_composed;
  f = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (others.length === 0) {
    return f;
  } else {
    others_composed = apply(compose, others);
    return function() {
      return f(apply(others_composed, arguments));
    };
  }
};
