#assuming primitives: [<number>], [<range>], index-of, last-index-of, uppercase? lowercase?, alpha?

String.watman := 'NaN'.repeat[15] + ' Batman!'

String.lowercase-set = 'abcdefghijklmnopqrstuvwxyz'

String.uppercase-set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

String.number-set = '0123456789'

String.alpha-set = String.lowercase-set + String.uppercase-set

String.alphanumeric-set = String.lowercase-set + String.uppercase-set + String.number-set

String.instance.- = {
    [@self, @s]: @self.replace[@s, '']
}

String.instance.contains? = {
    [@self, [@s]]: @self.index-of[@s] != -1
}

String.instance.begins-with? = {
    [@self, [@s]]: @self.index-of[@s] == 0
}

String.instance.ends-with? = {
    [@self, [@s]]: @self.last-index-of[@s] == (@self.length - @s.length)
}

String.instance.index-of = {
    [@self, [@s]]:
        i = 0
        streak = 0
        streakStart = -1
        complete = false
        {[]: i < @self.length and streak < @s.length}.while-true {
            []:
                char = @self[i]
                (char == @s[streak]).on {
                    true:
                        (streak == 0).on {
                            true: streakStart |= i
                            false: nil
                        }
                        streak |= streak + 1
                    false: streak |= 0
                }
                i |= i + 1
        }
        (streak == @s.length).on {
            true: streakStart
            false: -1
        }
}

String.instance.last-index-of = {
    [@self, [@s]]:
        (@self.contains?[@s].not).on { # For speed, do a pre-check to see if the owner contains the string
            true: -1
            false:
                i = @self.length - 1
                streak = @s.length - 1
                streakStart = -1
                complete = false
                {[]: i >= 0 and streak >= 0}.while-true {
                    []:
                        char = @self[i]
                        (char == @s[streak]).on {
                            true:
                                (streak == 0).on {
                                    true: streakStart |= i
                                    false: nil
                                }
                                streak |= streak - 1
                            false: streak |= @s.length - 1
                        }
                        i |= i - 1
                }
                streakStart
        }
}

# Not working due to missing push! List primitive
String.instance.split = {
    [@self, [@s]]:
        result = []
        check = @self
        {[]: check.contains?[@s]}.while-true {
            []:
                next = check.substring[0, check.index-of[@s]]
                result.push![next]
                check |= check.substring[check.index-of[@s] + @s.length, check.length]
        }
        result.push![check]
}

String.instance.substring = {
    [@self, [@start]]: @self.substring[@start, @self.length]
    [@self, [@start, @end]]:
        if @start.abs > @self.length or @end.abs > @self.length
            error['Index out of bounds']
        else
            start = @start
            end = @end
            (start < 0).on {
                true: start |= @self.length + start
                false: nil
            }
            (end < 0).on {
                true: end |= @self.length + end
                false: nil
            }
            result = ''
            i = start
            {[]: i < end}.while-true {
                []:
                    result |= result + @self[i]
                    i |= i + 1
            }
            result
}

String.instance.replace = {
    [@self, [@substring, @replace]]: @self.split[@substring].join[@replace]
}

String.instance.replace-first = {
    [@self, [@substring, @replace]]:
        list = @self.split[@substring]
        if list.length <= 1
            @self
        else
            result = list[0] + @replace
            i = 1
            {[]: i < list.length - 1}.while-true {
                []:
                    result |= list[i] + @substring
                    i |= i + 1
                    
            }
            result + list[list.length - 1]
}

String.instance.repeat = {
    [@self, [0]]: ''
    [@self, [@n]]: @self.repeat[@n - 1] + @self
}

String.instance.matches-set? = {
    [@self, [@set]]:
        i = 0
        result = @self.length > 0
        {[]: i < @self.length and result}.while-true {
            []:
                result |= @set.contains?[@self[i]]
                i |= i + 1
        }
        result
}

# True if all characters are uppercase or numbers
String.instance.uppercase? = {
    [@self]: @self.matches-set?[String.uppercase-set + String.number-set]
}

# True if all characters are uppercase
String.instance.uppercase-alpha? = {
    [@self]: @self.matches-set?[String.uppercase-set]
}

String.instance.lowercase? = {
    [@self]: @self.matches-set?[String.lowercase-set + String.number-set]
}

String.instance.lowercase-alpha? = {
    [@self]: @self.matches-set?[String.lowercase-set]
}

String.instance.alpha? = {
    [@self]: @self.matches-set?[String.alpha-set]
}

String.instance.alphanumeric? = {
    [@self]: @self.matches-set?[String.alphanumeric-set]
}

String.instance.uppercase = {
    [@self]:
        result = ''
        i = 0
        {[]: i < @self.length}.while-true {
            []:
                char = @self[i]
                if char.lowercase-alpha?
                    char |= String.uppercase-set[String.lowercase-set.index-of[char]]
                else
                    nil
                result |= result + char
                i |= i + 1
        }
        result
}

String.instance.lowercase = {
    [@self]:
        result = ''
        i = 0
        {[]: i < @self.length}.while-true {
            []:
                char = @self[i]
                if char.uppercase-alpha?
                    char |= String.lowercase-set[String.uppercase-set.index-of[char]]
                else
                    nil
                result |= result + char
                i |= i + 1
        }
        result
}

String.instance.swap-case = {
    [@self]:
        result = ''
        i = 0
        {[]: i < @self.length}.while-true {
            []:
                char = @self[i]
                if char.uppercase?
                    char |= String.lowercase-set[String.uppercase-set.index-of[char]]
                else if char.lowercase?
                    char |= String.uppercase-set[String.lowercase-set.index-of[char]]
                else
                    nil
                result |= result + char
                i |= i + 1
        }
        result
}

String.instance.title-case = {
    ['']: ''
    [@self]:
        list = @self.split[' ']
        result = ''
        i = 0
        {[]: i < list.length}.while-true {
            []:
                if i != 0
                    result |= result + ' ' + list[i][0].uppercase + list[i].substring[1].lowercase
                else
                    result |= result + list[i][0].uppercase + list[i].substring[1].lowercase
                i |= i + 1
        }
        result
}

String.instance.capitalize = {
    ['']: ''
    [@self]: @self[0].uppercase + @self.substring[1].lowercase
}

String.instance.cap-first = {
    ['']: ''
    [@self]: @self[0].uppercase + @self.substring[1]
}

String.instance.quote = {
    [@self]: '"' + (@self.replace['\\', '\\\\'].replace['"', '\\"']) + '"'
}

# Assumes the string is in quoted string format
String.instance.unquote = {
    [@self]: @self.substring[1, @self.length - 1].replace['\\"', '"'].replace['\\\\', '\\']
}

#|
& -> &amp;
< -> &lt;
> -> &gt;
" -> &quot;
' -> &apos;
|#
String.instance.escape-html = {
    [@self]: @self.replace['&', '&amp;'].replace['<', '&lt;'].replace['>', '&gt;'].replace['"', '&quot;'].replace['\'', '&apos;']
}

String.instance.unescape-html = {
    [@self]: @self.replace['&amp;', '&'].replace['&lt;', '<'].replace['&gt;', '>'].replace['&quot;', '"'].replace['&apos;', '\'']
}

String.instance.lines = {
    [@self]: @self.split['\n']
}
