# the programmer can always access any builtin method from the class of the receiver like this:

[0].map[f] == Array::map[[0], [f]]

# this is important for inverses:

Number::-[@x, 1] # matches a number one greater than the argument
Number::abs[@x] # matches against a positive Number

# whenever you see a method with an exclamation at the end, define an additional method without the exclamation that does not modify the receiver

[3, 1, 2].sort![] # sorts the receiver
[3, 1, 2].sort[] # returns a sorted copy of the receiver





Free funjects
=============
by[.sym] # => {[f]: f.sym}; allows array.sort[by[.height]]
assert[assertion, message] # throws an error if assertion does not evaluate to true, the optional message pararmeter specifies the error message of the error to throw
assert==[i, j] # throws an error if i and j are not equal
unreachable # throws an error if called, used for throwing an error indicating that a piece of code not intended to run was executed


Class methods
=============
.superclass
.subclasses # the receiver's direct subclasses
.all-subclasses # all of the receiver's subclasses
.subclass?[c] # true if c is a subclass of the receiver or any of its subclasses
.superclass?[c] # true if c is the superclass of the receiver or any of its superclasses
.methods # the keys for the receivers's instance methods
.all-methods # the keys for the receivers's instance methods and those of all of its superclasses
.instance # the receiver's instance methods





Funject methods
===============
is x # identity comparison; when one changes, the other changes
== x # tests for deep equality between lists and identity between funjects and primitive types; subclasses may override

.apply[x] # => receiver x
.then[f] # => f[receiver]; ex: arr.lots-of-long-methods.then[{[arr]: arr[arr.length - 1]}]
.on f # => f receiver; allows conditionals and switch-cases without additional syntax

.while-true f # repeatedly invokes f[] while reciever[] evaluates to true
.do-while-true f # invokes f[], then repeatedly invokes f[] while reciever[] evaluates to true

.has?[k] # true if the receiver matches k
.clone # a new funject which inherits from the receiver

.append[k, v] # sets k equal to v at the bottom of the funject
.insert[i, k, v] # sets k equal to v before the ith pair

.number?
.string?
.boolean?
.symbol?
.unknown?
.nil?
.list?

.integer? # true if the receiver is a number and has no fractional component
.float? # true if the receiver is a number and has a fractional component

.is-member-of?[c] # true if receiver is an instance of class c
.is-kind-of?[c] # true if the receiver is an instance of class c or one of its subclasses

.to-string # a human-readable string representation
.inspect # a debugger-friendly string representation

.silently # a funject which matches the same arguments as the receiver and returns nil where an error would normally occur

Low priority
------------
.each[f] # iterates over the key-value pairs and calls f[key, value]
.keys # all the constant patterns in the receiver; signals an error if any of the patterns have parameters
.all-keys # all the constant patterns in the receiver and all of its parents
.keys-of[c] # all keys that are instances of class c or one of its subclasses; signals an error if any patterns have parameters

Funject.assoc[k, v] # creates a funject from a list of keys and a list of values (Underscore)
Funject.assoc[a] # creates a funject from a list of key-value pairs (Underscore)





Number methods
==============
# sources: Ruby, JS

Number.e
Number.pi

Number.random[] # a random number on the range [0, 1)
Number.random[n] # a random integer between 0 and n - 1
Number.random[a, b] # a random integer between that a and b - 1; signals an error if b <= a

+
-
*
/
%
^ # power operator

.sqrt
.ln
.log[b] # the log base b of the receiver

.sin
.cos
.tan
.sec
.csc
.cot
.asin
.acos
.atan
.atan/[n] # a.tan/[b] is (a / b).atan; this allows us to note that a.atan/[0] is 1 without using Infinity

.abs # also a prefix operator

.ceil
.floor
.round

.times[f] # invokes f[0]..f[receiver - 1] and returns a list of the results; signals an error if the receiver is not an integer

Low priority
------------
.root[n] # => receiver ^ (1 / n); signals an error if passed zero

.asec
.acsc
.acot
.sinh
.cosh
.tanh
.coth
.sech
.csch
.asinh
.acosh
.atanh
.acoth
.asech
.acsch

.downto[n] # a list or range with the values n..receiver
.upto # a list or range with the values receiver..n

.to-fixed[n] # a string representation of the receiver with n decimal places

.to-pennies # (receiver * 100).round
.to-dollars # receiver.round / 100





Boolean methods
===============
.and # short-circuiting; also an infix operator
.or # short-circuiting; also an infix operator
.xor
.not # also a prefix operator





String methods
==============
# sources: JS, Python, Ruby, Underscore, Haskell

* n # a string of n instances of the receiver
+ s # concatenation

[<number>] # a single-length string representing the character at the given zero-based index; negative indices count from the end
[<range>] # the substring of the receiver in the given range

.length # the length of the string

.contains?[s] # true if the receiver contains the substring s
.begins-with?[s]
.ends-with?[s]

.index-of[s]
.last-index-of[s]

.split[s] # (JS)

.replace[search-for, replace-with] # replaces all occurrences of the string search-for with the string replace-with in the receiver
.replace-first[search-for, replace-with] # replaces the first occurrence of the string search-for with the string replace-with in the receiver

.uppercase
.lowercase
.swapcase # (Ruby)
.capitalize

Lower priority
--------------
.count[s or f] # the number of occurences of s or strings for which f returns true; signals an error if f is not a predicate

.uppercase? # (Python)
.lowercase? # (Python)
.capitalized? # (Python)
.alphabetic? # (Python)
.numeric? # (Python)
.alphanumeric? # (Python)

.every[s or f] # like arr.every, but matches a strings, too.
.partition[s or f] # an array of three elements: the part before the separator, the separator itself, and the part after it (Python)
.matches[str or f] # a list of strings that match str or f (Ruby)

.insert[i, s] # a string containing the first i characters of the receiver followed by s followed by the remaining characters of the receiver

.each[f] # invokes f[c] for each character in the receiver

.escape-html # "escapes a string for insertion into HTML, replacing &, <, >, ", ', and / characters" (Underscore)
.unescape-html # "the opposite of escape, replaces &amp;, &lt;, &gt;, &quot;, &#x27;, and &#x2F; with their unescaped counterparts" (Underscore)

.trim[s] # removes all characters from the beginning and end of the receiver which appear in s
.trim-left[s] # (JS)
.trim-right[s] # (JS)
.trim-whitespace # removes all whitespace characters from the beginning and end of the receiver

.strip-prefix[s] # if str is at the beginning of the receiver, return the rest of the receiver; otherwise, signal an error (Haskell)
.center[width or s] # (Ruby)

.lines # the receiver split by newlines
.words # the receiver split by non-word characters
.characters # an array of the receiver's characters

.squeeze # the receiver with runs of the same character replaced by a single instance of that character (Ruby)





Array methods
=============
# sources: JavaScript, Underscore, Python, Ruby, Haskell

Array.zip[a, ...] # takes any number of arrays and zips them all (Scheme)
Array.zip-with[f, a, ...] # applies f[a[i], ...] for each element in the given arrays and returns an array of the results
Array.cross[a, ...] # returns an array of all possible arrays of a single value drawn from each array given, in the order given

* n # an array of n instances of the receiver concatenated together
+ # concatenation

[<number>] # array reference; negative indices count from the end
[<range>] # the subset of the receiver within the given range

.length # one greater than the index of the element with the highest index (not necessarily the same as count)
.count # the number of elements the programmer explicitly set (not necessarily the same as length)

.empty? # (Scheme, Ruby)
.contains?[x] # Ruby

.delete-at![<number>] # deletes an element of the receiver
.delete-at![<range>] # deletes a subset of the receiver

.insert![i, x, n=1] # inserts x n times at i

.pop! # (JS)
.push! # returns the receiver (Ruby)
.shift! # (JS)
.unshift! # returns the receiver (JS)

.index-of[x]
.last-index-of[x]

.join[s] # (JS)

.sort![] # (JS)
.sort![f] # takes a funject that returns numbers; an element with a number higher than another should appear after it (JS)

.map![f, [<number> or <range>]] # copies the array before iterating; if given an index or range, maps over only those elements
.pluck![key] # (Underscore)
.invoke![key] # (Underscore)

.filter![f] # only the elements for which f[e] is true
.reject![f] # only the elements for which f[e] is false

.reduce # (JS)
.reduce-right # (JS)
.every # copies the array before iterating
.any # copies the array before iterating

.first[f, n=0] # the nth element for which f[e] is true
.first[f, <range>] # the (n..m)th elements for which f[e] is true
.last[f, n=0] # the nth last element for which f[e] is true
.last[f, <range>] # the (n..m)th last elements for which f[e] is true

.take![n] # the first n elements
.take-while![f] # the elements at the beginning of the receiver up to but not including the first element for whichs f[e] is false

.drop![n] # all but the first n elements
.drop-while![f] # the first element for which f[e] is false and all subsequent elements

.union! # (Underscore)
.intersection! # (Underscore)
.unique! # removes duplicate elements

.difference![a] # removes any elements which are elements of a
.remove![x, n=1] # removes the first n occurrences of x
.remove-all![X] # removes all occurrences of x
.compact! # removes any elements which are nil

.transpose # (Ruby); signals an error if any element is not an array
.shuffle! # (Underscore)
.reverse! # (JS)

.flatten! # (Underscore)
.shallow-flatten! # (Undescore)

.max[] # the greatest element; signals an error if any element is non-numeric
.min[] # the least element; signals an error if any element is non-numeric
.max[f] # the element with the greatest f[e]
.min[f] # the element with the least f[e]

.group[f={[x]: x}] # a funject whose keys are the things returned by f and whose values are arrays of the arguments that produced them (Underscore)


lower priority
--------------
(maybe) Array.unfold-right[f, start] #Haskell; takes a starting value and a funject that takes a parameter and either returns nil or a list of two values. Puts all of the [0]'s of the returned lists in an array, passes the functions the values of the [1]'s of the array, and stops when the function returns nil.
(maybe) Array.unfold-left[f, start] #array.unfold-left(f, start) is array.unfold-right(f, start).reverse

.each-index[f] # copies the array before iterating; returns nil (Ruby)

.scan![f] # like reduce, but accumulates each intermediate value (Haskell)
.scan-right![f] # scans from the right (Haskell)

.unzip # takes a list of lists of length n and returns a list of length n of the elements at each index; signals an error if the arrays are of unequal length

.random # selects a random element from the array

.sum # .reduce[Number::+, 0]
.product # .reduce[Number::*, 1]

.permutations # an array of all possible permutations of the elements
.subsequences # all possible arrays of consecutive elements, including the empty array (Haskell)

.rotate-left! # (Ruby)
.rotate-right! # (Ruby)
.deep-transpose![n] # rotates the first n dimensions of the array's indices

.intersperse![x] # (Haskell)

.partition[f] # return an array of two elements: all elements that satisfy f and all those that don't (Haskell)





Range methods
=============
# a..b or a..b..c
# if a Range method does not exist but an Array method of the same name does, the range is converted to an array and the method is invoked on the result

.each[f] # like Array::each
