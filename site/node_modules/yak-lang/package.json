{
  "name": "yak-lang",
  "version": "1.0.3",
  "engines": "node 0.10",
  "author": {
    "name": "Will Murphy"
  },
  "main": "yak-lang.js",
  "readmeFilename": "README.md",
  "_id": "yak-lang@1.0.3",
  "description": "The first language of the funject paradigm.",
  "readme": "\nYak\n=======\nYak is the first language of the funject paradigm. If you don't know about it, read about <a href='//www.yak-lang.org'>it</a>. The yak-lang module gives you a full Yak interpreter. \n\n<h2>Installing</h2>\n\n<code><pre>$ npm install yak-lang</pre></code>\n\n<h2>Usage</h2>\n\n<code><pre>var yak = require('yak-lang');</pre></code>\n\nYou can evaluate strings of Yak:\n\n<code><pre>yak.eval('print[\"Hello, Yak!\"]');</pre></code>\n\nOr evaluate entire files:\n\n<code><pre>yak.evalFile('./awesomeness.yak', function (err, result) { \n    ... \n});</pre></code>\n\nBoth eval and evalFile pass their callbacks any errors and a JavaScript object representing the last Yak expression. \n\nYou can also use their synchronous cousins evalSync and evalFileSync:\n\n<code><pre>yak.evalFileSync('./app.yak');</pre></code>\n\n<h2>Import</h2>\n\nIn Yak you can access the <code>require</code>-like funject <code>import</code>:\n\n<code><pre>import['./another.yak']</pre><code>\n\nIn <code>another.yak</code> you have access to the <code>require</code>-esque <code>exports</code>:\n\n<code><pre>exports.foo = 'bar'\n\nexports[Math.sin[@x]] := Math.cos[@x]</pre></code>\n\n\n",
  "_from": "yak-lang@1.0.x"
}
